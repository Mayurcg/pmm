// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type entityRolesViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *entityRolesViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("entity_roles").
func (v *entityRolesViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *entityRolesViewType) Columns() []string {
	return []string{
		"entity_id",
		"entity_type",
		"role_id",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *entityRolesViewType) NewStruct() reform.Struct {
	return new(EntityRoles)
}

// EntityRolesView represents entity_roles view or table in SQL database.
var EntityRolesView = &entityRolesViewType{
	s: parse.StructInfo{
		Type:    "EntityRoles",
		SQLName: "entity_roles",
		Fields: []parse.FieldInfo{
			{Name: "EntityID", Type: "int", Column: "entity_id"},
			{Name: "EntityType", Type: "EntityType", Column: "entity_type"},
			{Name: "RoleID", Type: "uint32", Column: "role_id"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: -1,
	},
	z: new(EntityRoles).Values(),
}

// String returns a string representation of this struct or record.
func (s EntityRoles) String() string {
	res := make([]string, 5)
	res[0] = "EntityID: " + reform.Inspect(s.EntityID, true)
	res[1] = "EntityType: " + reform.Inspect(s.EntityType, true)
	res[2] = "RoleID: " + reform.Inspect(s.RoleID, true)
	res[3] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[4] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *EntityRoles) Values() []interface{} {
	return []interface{}{
		s.EntityID,
		s.EntityType,
		s.RoleID,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *EntityRoles) Pointers() []interface{} {
	return []interface{}{
		&s.EntityID,
		&s.EntityType,
		&s.RoleID,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *EntityRoles) View() reform.View {
	return EntityRolesView
}

// check interfaces
var (
	_ reform.View   = EntityRolesView
	_ reform.Struct = (*EntityRoles)(nil)
	_ fmt.Stringer  = (*EntityRoles)(nil)
)

func init() {
	parse.AssertUpToDate(&EntityRolesView.s, new(EntityRoles))
}
