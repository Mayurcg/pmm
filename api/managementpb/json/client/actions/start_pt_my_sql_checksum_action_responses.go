// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartPTMySQLChecksumActionReader is a Reader for the StartPTMySQLChecksumAction structure.
type StartPTMySQLChecksumActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartPTMySQLChecksumActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartPTMySQLChecksumActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewStartPTMySQLChecksumActionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartPTMySQLChecksumActionOK creates a StartPTMySQLChecksumActionOK with default headers values
func NewStartPTMySQLChecksumActionOK() *StartPTMySQLChecksumActionOK {
	return &StartPTMySQLChecksumActionOK{}
}

/* StartPTMySQLChecksumActionOK describes a response with status code 200, with default header values.

A successful response.
*/
type StartPTMySQLChecksumActionOK struct {
	Payload *StartPTMySQLChecksumActionOKBody
}

func (o *StartPTMySQLChecksumActionOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/Actions/StartPTMySQLChecksum][%d] startPtMySqlChecksumActionOk  %+v", 200, o.Payload)
}
func (o *StartPTMySQLChecksumActionOK) GetPayload() *StartPTMySQLChecksumActionOKBody {
	return o.Payload
}

func (o *StartPTMySQLChecksumActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartPTMySQLChecksumActionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartPTMySQLChecksumActionDefault creates a StartPTMySQLChecksumActionDefault with default headers values
func NewStartPTMySQLChecksumActionDefault(code int) *StartPTMySQLChecksumActionDefault {
	return &StartPTMySQLChecksumActionDefault{
		_statusCode: code,
	}
}

/* StartPTMySQLChecksumActionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type StartPTMySQLChecksumActionDefault struct {
	_statusCode int

	Payload *StartPTMySQLChecksumActionDefaultBody
}

// Code gets the status code for the start PT my SQL checksum action default response
func (o *StartPTMySQLChecksumActionDefault) Code() int {
	return o._statusCode
}

func (o *StartPTMySQLChecksumActionDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/Actions/StartPTMySQLChecksum][%d] StartPTMySQLChecksumAction default  %+v", o._statusCode, o.Payload)
}
func (o *StartPTMySQLChecksumActionDefault) GetPayload() *StartPTMySQLChecksumActionDefaultBody {
	return o.Payload
}

func (o *StartPTMySQLChecksumActionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartPTMySQLChecksumActionDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StartPTMySQLChecksumActionBody Message to prepare pt-table-checksum data
swagger:model StartPTMySQLChecksumActionBody
*/
type StartPTMySQLChecksumActionBody struct {

	// pmm-agent ID where to run this Action.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`

	// Service ID for this Action.
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this start PT my SQL checksum action body
func (o *StartPTMySQLChecksumActionBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start PT my SQL checksum action body based on context it is used
func (o *StartPTMySQLChecksumActionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionBody) UnmarshalBinary(b []byte) error {
	var res StartPTMySQLChecksumActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartPTMySQLChecksumActionDefaultBody start PT my SQL checksum action default body
swagger:model StartPTMySQLChecksumActionDefaultBody
*/
type StartPTMySQLChecksumActionDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*StartPTMySQLChecksumActionDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this start PT my SQL checksum action default body
func (o *StartPTMySQLChecksumActionDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartPTMySQLChecksumActionDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartPTMySQLChecksumAction default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StartPTMySQLChecksumAction default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this start PT my SQL checksum action default body based on the context it is used
func (o *StartPTMySQLChecksumActionDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartPTMySQLChecksumActionDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartPTMySQLChecksumAction default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StartPTMySQLChecksumAction default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionDefaultBody) UnmarshalBinary(b []byte) error {
	var res StartPTMySQLChecksumActionDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartPTMySQLChecksumActionDefaultBodyDetailsItems0 start PT my SQL checksum action default body details items0
swagger:model StartPTMySQLChecksumActionDefaultBodyDetailsItems0
*/
type StartPTMySQLChecksumActionDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this start PT my SQL checksum action default body details items0
func (o *StartPTMySQLChecksumActionDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start PT my SQL checksum action default body details items0 based on context it is used
func (o *StartPTMySQLChecksumActionDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res StartPTMySQLChecksumActionDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartPTMySQLChecksumActionOKBody Message to retrieve the prepared pt-table-checksum data
swagger:model StartPTMySQLChecksumActionOKBody
*/
type StartPTMySQLChecksumActionOKBody struct {

	// Unique Action ID.
	ActionID string `json:"action_id,omitempty"`

	// pmm-agent ID where to this Action was started.
	PMMAgentID string `json:"pmm_agent_id,omitempty"`
}

// Validate validates this start PT my SQL checksum action OK body
func (o *StartPTMySQLChecksumActionOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start PT my SQL checksum action OK body based on context it is used
func (o *StartPTMySQLChecksumActionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartPTMySQLChecksumActionOKBody) UnmarshalBinary(b []byte) error {
	var res StartPTMySQLChecksumActionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
