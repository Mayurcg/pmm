// Code generated by go-swagger; DO NOT EDIT.

package prometheus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRouteGetRuleStatusesParams creates a new RouteGetRuleStatusesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRouteGetRuleStatusesParams() *RouteGetRuleStatusesParams {
	return &RouteGetRuleStatusesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRouteGetRuleStatusesParamsWithTimeout creates a new RouteGetRuleStatusesParams object
// with the ability to set a timeout on a request.
func NewRouteGetRuleStatusesParamsWithTimeout(timeout time.Duration) *RouteGetRuleStatusesParams {
	return &RouteGetRuleStatusesParams{
		timeout: timeout,
	}
}

// NewRouteGetRuleStatusesParamsWithContext creates a new RouteGetRuleStatusesParams object
// with the ability to set a context for a request.
func NewRouteGetRuleStatusesParamsWithContext(ctx context.Context) *RouteGetRuleStatusesParams {
	return &RouteGetRuleStatusesParams{
		Context: ctx,
	}
}

// NewRouteGetRuleStatusesParamsWithHTTPClient creates a new RouteGetRuleStatusesParams object
// with the ability to set a custom HTTPClient for a request.
func NewRouteGetRuleStatusesParamsWithHTTPClient(client *http.Client) *RouteGetRuleStatusesParams {
	return &RouteGetRuleStatusesParams{
		HTTPClient: client,
	}
}

/* RouteGetRuleStatusesParams contains all the parameters to send to the API endpoint
   for the route get rule statuses operation.

   Typically these are written to a http.Request.
*/
type RouteGetRuleStatusesParams struct {
	// DashboardUID.
	DashboardUID *string

	// PanelID.
	//
	// Format: int64
	PanelID *int64

	/* Recipient.

	     Recipient should be "grafana" for requests to be handled by grafana
	and the numeric datasource id for requests to be forwarded to a datasource
	*/
	Recipient string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the route get rule statuses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteGetRuleStatusesParams) WithDefaults() *RouteGetRuleStatusesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the route get rule statuses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteGetRuleStatusesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) WithTimeout(timeout time.Duration) *RouteGetRuleStatusesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) WithContext(ctx context.Context) *RouteGetRuleStatusesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) WithHTTPClient(client *http.Client) *RouteGetRuleStatusesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDashboardUID adds the dashboardUID to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) WithDashboardUID(dashboardUID *string) *RouteGetRuleStatusesParams {
	o.SetDashboardUID(dashboardUID)
	return o
}

// SetDashboardUID adds the dashboardUid to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) SetDashboardUID(dashboardUID *string) {
	o.DashboardUID = dashboardUID
}

// WithPanelID adds the panelID to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) WithPanelID(panelID *int64) *RouteGetRuleStatusesParams {
	o.SetPanelID(panelID)
	return o
}

// SetPanelID adds the panelId to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) SetPanelID(panelID *int64) {
	o.PanelID = panelID
}

// WithRecipient adds the recipient to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) WithRecipient(recipient string) *RouteGetRuleStatusesParams {
	o.SetRecipient(recipient)
	return o
}

// SetRecipient adds the recipient to the route get rule statuses params
func (o *RouteGetRuleStatusesParams) SetRecipient(recipient string) {
	o.Recipient = recipient
}

// WriteToRequest writes these params to a swagger request
func (o *RouteGetRuleStatusesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {
	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DashboardUID != nil {

		// query param DashboardUID
		var qrDashboardUID string

		if o.DashboardUID != nil {
			qrDashboardUID = *o.DashboardUID
		}
		qDashboardUID := qrDashboardUID
		if qDashboardUID != "" {
			if err := r.SetQueryParam("DashboardUID", qDashboardUID); err != nil {
				return err
			}
		}
	}

	if o.PanelID != nil {

		// query param PanelID
		var qrPanelID int64

		if o.PanelID != nil {
			qrPanelID = *o.PanelID
		}
		qPanelID := swag.FormatInt64(qrPanelID)
		if qPanelID != "" {
			if err := r.SetQueryParam("PanelID", qPanelID); err != nil {
				return err
			}
		}
	}

	// path param Recipient
	if err := r.SetPathParam("Recipient", o.Recipient); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
