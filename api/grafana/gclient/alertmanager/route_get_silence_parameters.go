// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRouteGetSilenceParams creates a new RouteGetSilenceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRouteGetSilenceParams() *RouteGetSilenceParams {
	return &RouteGetSilenceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRouteGetSilenceParamsWithTimeout creates a new RouteGetSilenceParams object
// with the ability to set a timeout on a request.
func NewRouteGetSilenceParamsWithTimeout(timeout time.Duration) *RouteGetSilenceParams {
	return &RouteGetSilenceParams{
		timeout: timeout,
	}
}

// NewRouteGetSilenceParamsWithContext creates a new RouteGetSilenceParams object
// with the ability to set a context for a request.
func NewRouteGetSilenceParamsWithContext(ctx context.Context) *RouteGetSilenceParams {
	return &RouteGetSilenceParams{
		Context: ctx,
	}
}

// NewRouteGetSilenceParamsWithHTTPClient creates a new RouteGetSilenceParams object
// with the ability to set a custom HTTPClient for a request.
func NewRouteGetSilenceParamsWithHTTPClient(client *http.Client) *RouteGetSilenceParams {
	return &RouteGetSilenceParams{
		HTTPClient: client,
	}
}

/* RouteGetSilenceParams contains all the parameters to send to the API endpoint
   for the route get silence operation.

   Typically these are written to a http.Request.
*/
type RouteGetSilenceParams struct {
	/* Recipient.

	     Recipient should be "grafana" for requests to be handled by grafana
	and the numeric datasource id for requests to be forwarded to a datasource
	*/
	Recipient string

	// SilenceID.
	SilenceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the route get silence params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteGetSilenceParams) WithDefaults() *RouteGetSilenceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the route get silence params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteGetSilenceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the route get silence params
func (o *RouteGetSilenceParams) WithTimeout(timeout time.Duration) *RouteGetSilenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the route get silence params
func (o *RouteGetSilenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the route get silence params
func (o *RouteGetSilenceParams) WithContext(ctx context.Context) *RouteGetSilenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the route get silence params
func (o *RouteGetSilenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the route get silence params
func (o *RouteGetSilenceParams) WithHTTPClient(client *http.Client) *RouteGetSilenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the route get silence params
func (o *RouteGetSilenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRecipient adds the recipient to the route get silence params
func (o *RouteGetSilenceParams) WithRecipient(recipient string) *RouteGetSilenceParams {
	o.SetRecipient(recipient)
	return o
}

// SetRecipient adds the recipient to the route get silence params
func (o *RouteGetSilenceParams) SetRecipient(recipient string) {
	o.Recipient = recipient
}

// WithSilenceID adds the silenceID to the route get silence params
func (o *RouteGetSilenceParams) WithSilenceID(silenceID string) *RouteGetSilenceParams {
	o.SetSilenceID(silenceID)
	return o
}

// SetSilenceID adds the silenceId to the route get silence params
func (o *RouteGetSilenceParams) SetSilenceID(silenceID string) {
	o.SilenceID = silenceID
}

// WriteToRequest writes these params to a swagger request
func (o *RouteGetSilenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {
	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Recipient
	if err := r.SetPathParam("Recipient", o.Recipient); err != nil {
		return err
	}

	// path param SilenceId
	if err := r.SetPathParam("SilenceId", o.SilenceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
