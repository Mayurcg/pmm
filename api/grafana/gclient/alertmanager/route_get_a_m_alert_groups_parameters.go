// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRouteGetAMAlertGroupsParams creates a new RouteGetAMAlertGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRouteGetAMAlertGroupsParams() *RouteGetAMAlertGroupsParams {
	return &RouteGetAMAlertGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRouteGetAMAlertGroupsParamsWithTimeout creates a new RouteGetAMAlertGroupsParams object
// with the ability to set a timeout on a request.
func NewRouteGetAMAlertGroupsParamsWithTimeout(timeout time.Duration) *RouteGetAMAlertGroupsParams {
	return &RouteGetAMAlertGroupsParams{
		timeout: timeout,
	}
}

// NewRouteGetAMAlertGroupsParamsWithContext creates a new RouteGetAMAlertGroupsParams object
// with the ability to set a context for a request.
func NewRouteGetAMAlertGroupsParamsWithContext(ctx context.Context) *RouteGetAMAlertGroupsParams {
	return &RouteGetAMAlertGroupsParams{
		Context: ctx,
	}
}

// NewRouteGetAMAlertGroupsParamsWithHTTPClient creates a new RouteGetAMAlertGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRouteGetAMAlertGroupsParamsWithHTTPClient(client *http.Client) *RouteGetAMAlertGroupsParams {
	return &RouteGetAMAlertGroupsParams{
		HTTPClient: client,
	}
}

/* RouteGetAMAlertGroupsParams contains all the parameters to send to the API endpoint
   for the route get a m alert groups operation.

   Typically these are written to a http.Request.
*/
type RouteGetAMAlertGroupsParams struct {
	/* Recipient.

	     Recipient should be "grafana" for requests to be handled by grafana
	and the numeric datasource id for requests to be forwarded to a datasource
	*/
	Recipient string

	/* Active.

	   Show active alerts

	   Default: true
	*/
	Active *bool

	/* Filter.

	   A list of matchers to filter alerts by
	*/
	Matchers []string

	/* Inhibited.

	   Show inhibited alerts

	   Default: true
	*/
	Inhibited *bool

	/* Receiver.

	   A regex matching receivers to filter alerts by
	*/
	Receivers *string

	/* Silenced.

	   Show silenced alerts

	   Default: true
	*/
	Silenced *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the route get a m alert groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteGetAMAlertGroupsParams) WithDefaults() *RouteGetAMAlertGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the route get a m alert groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteGetAMAlertGroupsParams) SetDefaults() {
	var (
		activeDefault = bool(true)

		inhibitedDefault = bool(true)

		silencedDefault = bool(true)
	)

	val := RouteGetAMAlertGroupsParams{
		Active:    &activeDefault,
		Inhibited: &inhibitedDefault,
		Silenced:  &silencedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithTimeout(timeout time.Duration) *RouteGetAMAlertGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithContext(ctx context.Context) *RouteGetAMAlertGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithHTTPClient(client *http.Client) *RouteGetAMAlertGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRecipient adds the recipient to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithRecipient(recipient string) *RouteGetAMAlertGroupsParams {
	o.SetRecipient(recipient)
	return o
}

// SetRecipient adds the recipient to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetRecipient(recipient string) {
	o.Recipient = recipient
}

// WithActive adds the active to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithActive(active *bool) *RouteGetAMAlertGroupsParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetActive(active *bool) {
	o.Active = active
}

// WithMatchers adds the filter to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithMatchers(filter []string) *RouteGetAMAlertGroupsParams {
	o.SetMatchers(filter)
	return o
}

// SetMatchers adds the filter to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetMatchers(filter []string) {
	o.Matchers = filter
}

// WithInhibited adds the inhibited to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithInhibited(inhibited *bool) *RouteGetAMAlertGroupsParams {
	o.SetInhibited(inhibited)
	return o
}

// SetInhibited adds the inhibited to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetInhibited(inhibited *bool) {
	o.Inhibited = inhibited
}

// WithReceivers adds the receiver to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithReceivers(receiver *string) *RouteGetAMAlertGroupsParams {
	o.SetReceivers(receiver)
	return o
}

// SetReceivers adds the receiver to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetReceivers(receiver *string) {
	o.Receivers = receiver
}

// WithSilenced adds the silenced to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) WithSilenced(silenced *bool) *RouteGetAMAlertGroupsParams {
	o.SetSilenced(silenced)
	return o
}

// SetSilenced adds the silenced to the route get a m alert groups params
func (o *RouteGetAMAlertGroupsParams) SetSilenced(silenced *bool) {
	o.Silenced = silenced
}

// WriteToRequest writes these params to a swagger request
func (o *RouteGetAMAlertGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {
	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Recipient
	if err := r.SetPathParam("Recipient", o.Recipient); err != nil {
		return err
	}

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {
			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.Matchers != nil {

		// binding items for filter
		joinedFilter := o.bindParamFilter(reg)

		// query array param filter
		if err := r.SetQueryParam("filter", joinedFilter...); err != nil {
			return err
		}
	}

	if o.Inhibited != nil {

		// query param inhibited
		var qrInhibited bool

		if o.Inhibited != nil {
			qrInhibited = *o.Inhibited
		}
		qInhibited := swag.FormatBool(qrInhibited)
		if qInhibited != "" {
			if err := r.SetQueryParam("inhibited", qInhibited); err != nil {
				return err
			}
		}
	}

	if o.Receivers != nil {

		// query param receiver
		var qrReceiver string

		if o.Receivers != nil {
			qrReceiver = *o.Receivers
		}
		qReceiver := qrReceiver
		if qReceiver != "" {
			if err := r.SetQueryParam("receiver", qReceiver); err != nil {
				return err
			}
		}
	}

	if o.Silenced != nil {

		// query param silenced
		var qrSilenced bool

		if o.Silenced != nil {
			qrSilenced = *o.Silenced
		}
		qSilenced := swag.FormatBool(qrSilenced)
		if qSilenced != "" {
			if err := r.SetQueryParam("silenced", qSilenced); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamRouteGetAMAlertGroups binds the parameter filter
func (o *RouteGetAMAlertGroupsParams) bindParamFilter(formats strfmt.Registry) []string {
	filterIR := o.Matchers

	var filterIC []string
	for _, filterIIR := range filterIR { // explode []string

		filterIIV := filterIIR // string as string
		filterIC = append(filterIC, filterIIV)
	}

	// items.CollectionFormat: ""
	filterIS := swag.JoinByFormat(filterIC, "")

	return filterIS
}
