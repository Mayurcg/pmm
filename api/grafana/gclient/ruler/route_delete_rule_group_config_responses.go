// Code generated by go-swagger; DO NOT EDIT.

package ruler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/percona/pmm/api/grafana/gmodels"
)

// RouteDeleteRuleGroupConfigReader is a Reader for the RouteDeleteRuleGroupConfig structure.
type RouteDeleteRuleGroupConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteDeleteRuleGroupConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRouteDeleteRuleGroupConfigAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouteDeleteRuleGroupConfigAccepted creates a RouteDeleteRuleGroupConfigAccepted with default headers values
func NewRouteDeleteRuleGroupConfigAccepted() *RouteDeleteRuleGroupConfigAccepted {
	return &RouteDeleteRuleGroupConfigAccepted{}
}

/* RouteDeleteRuleGroupConfigAccepted describes a response with status code 202, with default header values.

Ack
*/
type RouteDeleteRuleGroupConfigAccepted struct {
	Payload gmodels.Ack
}

func (o *RouteDeleteRuleGroupConfigAccepted) Error() string {
	return fmt.Sprintf("[DELETE /api/ruler/{Recipient}/api/v1/rules/{Namespace}/{Groupname}][%d] routeDeleteRuleGroupConfigAccepted  %+v", 202, o.Payload)
}

func (o *RouteDeleteRuleGroupConfigAccepted) GetPayload() gmodels.Ack {
	return o.Payload
}

func (o *RouteDeleteRuleGroupConfigAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
