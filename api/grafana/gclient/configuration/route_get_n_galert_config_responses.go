// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/percona/pmm/api/grafana/gmodels"
)

// RouteGetNGalertConfigReader is a Reader for the RouteGetNGalertConfig structure.
type RouteGetNGalertConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteGetNGalertConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouteGetNGalertConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRouteGetNGalertConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRouteGetNGalertConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouteGetNGalertConfigOK creates a RouteGetNGalertConfigOK with default headers values
func NewRouteGetNGalertConfigOK() *RouteGetNGalertConfigOK {
	return &RouteGetNGalertConfigOK{}
}

/* RouteGetNGalertConfigOK describes a response with status code 200, with default header values.

GettableNGalertConfig
*/
type RouteGetNGalertConfigOK struct {
	Payload *gmodels.GettableNGalertConfig
}

func (o *RouteGetNGalertConfigOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/ngalert/admin_config][%d] routeGetNGalertConfigOK  %+v", 200, o.Payload)
}

func (o *RouteGetNGalertConfigOK) GetPayload() *gmodels.GettableNGalertConfig {
	return o.Payload
}

func (o *RouteGetNGalertConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(gmodels.GettableNGalertConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteGetNGalertConfigNotFound creates a RouteGetNGalertConfigNotFound with default headers values
func NewRouteGetNGalertConfigNotFound() *RouteGetNGalertConfigNotFound {
	return &RouteGetNGalertConfigNotFound{}
}

/* RouteGetNGalertConfigNotFound describes a response with status code 404, with default header values.

Failure
*/
type RouteGetNGalertConfigNotFound struct {
	Payload *gmodels.Failure
}

func (o *RouteGetNGalertConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/ngalert/admin_config][%d] routeGetNGalertConfigNotFound  %+v", 404, o.Payload)
}

func (o *RouteGetNGalertConfigNotFound) GetPayload() *gmodels.Failure {
	return o.Payload
}

func (o *RouteGetNGalertConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(gmodels.Failure)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteGetNGalertConfigInternalServerError creates a RouteGetNGalertConfigInternalServerError with default headers values
func NewRouteGetNGalertConfigInternalServerError() *RouteGetNGalertConfigInternalServerError {
	return &RouteGetNGalertConfigInternalServerError{}
}

/* RouteGetNGalertConfigInternalServerError describes a response with status code 500, with default header values.

Failure
*/
type RouteGetNGalertConfigInternalServerError struct {
	Payload *gmodels.Failure
}

func (o *RouteGetNGalertConfigInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/ngalert/admin_config][%d] routeGetNGalertConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *RouteGetNGalertConfigInternalServerError) GetPayload() *gmodels.Failure {
	return o.Payload
}

func (o *RouteGetNGalertConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(gmodels.Failure)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
