// Code generated by go-swagger; DO NOT EDIT.

package gmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateDashboardSnapshotCommand create dashboard snapshot command
//
// swagger:model CreateDashboardSnapshotCommand
type CreateDashboardSnapshotCommand struct {
	// Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.
	DeleteKey string `json:"deleteKey,omitempty"`

	// When the snapshot should expire in seconds in seconds. Default is never to expire.
	Expires int64 `json:"expires,omitempty"`

	// these are passed when storing an external snapshot ref
	// Save the snapshot on an external server rather than locally.
	External *bool `json:"external,omitempty"`

	// Define the unique key. Required if `external` is `true`.
	Key string `json:"key,omitempty"`

	// Snapshot name
	Name string `json:"name,omitempty"`

	// result
	Result *DashboardSnapshot `json:"Result,omitempty"`

	// dashboard
	// Required: true
	Dashboard JSON `json:"dashboard"`
}

// Validate validates this create dashboard snapshot command
func (m *CreateDashboardSnapshotCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDashboardSnapshotCommand) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Result")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDashboardSnapshotCommand) validateDashboard(formats strfmt.Registry) error {
	if m.Dashboard == nil {
		return errors.Required("dashboard", "body", nil)
	}

	return nil
}

// ContextValidate validate this create dashboard snapshot command based on the context it is used
func (m *CreateDashboardSnapshotCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDashboardSnapshotCommand) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {
	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDashboardSnapshotCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDashboardSnapshotCommand) UnmarshalBinary(b []byte) error {
	var res CreateDashboardSnapshotCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
