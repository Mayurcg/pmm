// Code generated by go-swagger; DO NOT EDIT.

package gmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardSnapshot DashboardSnapshot model
//
// swagger:model DashboardSnapshot
type DashboardSnapshot struct {
	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// dashboard
	Dashboard JSON `json:"Dashboard,omitempty"`

	// dashboard encrypted
	DashboardEncrypted []uint8 `json:"DashboardEncrypted"`

	// delete key
	DeleteKey string `json:"DeleteKey,omitempty"`

	// expires
	// Format: date-time
	Expires strfmt.DateTime `json:"Expires,omitempty"`

	// external
	External bool `json:"External,omitempty"`

	// external delete Url
	ExternalDeleteURL string `json:"ExternalDeleteUrl,omitempty"`

	// external Url
	ExternalURL string `json:"ExternalUrl,omitempty"`

	// Id
	ID int64 `json:"Id,omitempty"`

	// key
	Key string `json:"Key,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// org Id
	OrgID int64 `json:"OrgId,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"Updated,omitempty"`

	// user Id
	UserID int64 `json:"UserId,omitempty"`
}

// Validate validates this dashboard snapshot
func (m *DashboardSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardSnapshot) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("Created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DashboardSnapshot) validateExpires(formats strfmt.Registry) error {
	if swag.IsZero(m.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("Expires", "body", "date-time", m.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DashboardSnapshot) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("Updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dashboard snapshot based on context it is used
func (m *DashboardSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DashboardSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardSnapshot) UnmarshalBinary(b []byte) error {
	var res DashboardSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
