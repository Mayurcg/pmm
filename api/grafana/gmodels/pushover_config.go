// Code generated by go-swagger; DO NOT EDIT.

package gmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PushoverConfig pushover config
//
// swagger:model PushoverConfig
type PushoverConfig struct {
	// HTML
	HTML bool `json:"html,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// priority
	Priority string `json:"priority,omitempty"`

	// sound
	Sound string `json:"sound,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// URL title
	URLTitle string `json:"url_title,omitempty"`

	// v send resolved
	VSendResolved bool `json:"send_resolved,omitempty"`

	// expire
	// Format: duration
	Expire Duration `json:"expire,omitempty"`

	// http config
	HTTPConfig *HTTPClientConfig `json:"http_config,omitempty"`

	// retry
	// Format: duration
	Retry Duration `json:"retry,omitempty"`

	// token
	Token Secret `json:"token,omitempty"`

	// user key
	UserKey Secret `json:"user_key,omitempty"`
}

// Validate validates this pushover config
func (m *PushoverConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PushoverConfig) validateExpire(formats strfmt.Registry) error {
	if swag.IsZero(m.Expire) { // not required
		return nil
	}

	if err := m.Expire.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expire")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expire")
		}
		return err
	}

	return nil
}

func (m *PushoverConfig) validateHTTPConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPConfig) { // not required
		return nil
	}

	if m.HTTPConfig != nil {
		if err := m.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_config")
			}
			return err
		}
	}

	return nil
}

func (m *PushoverConfig) validateRetry(formats strfmt.Registry) error {
	if swag.IsZero(m.Retry) { // not required
		return nil
	}

	if err := m.Retry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("retry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("retry")
		}
		return err
	}

	return nil
}

func (m *PushoverConfig) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if err := m.Token.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("token")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("token")
		}
		return err
	}

	return nil
}

func (m *PushoverConfig) validateUserKey(formats strfmt.Registry) error {
	if swag.IsZero(m.UserKey) { // not required
		return nil
	}

	if err := m.UserKey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_key")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_key")
		}
		return err
	}

	return nil
}

// ContextValidate validate this pushover config based on the context it is used
func (m *PushoverConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpire(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PushoverConfig) contextValidateExpire(ctx context.Context, formats strfmt.Registry) error {
	if err := m.Expire.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expire")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expire")
		}
		return err
	}

	return nil
}

func (m *PushoverConfig) contextValidateHTTPConfig(ctx context.Context, formats strfmt.Registry) error {
	if m.HTTPConfig != nil {
		if err := m.HTTPConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_config")
			}
			return err
		}
	}

	return nil
}

func (m *PushoverConfig) contextValidateRetry(ctx context.Context, formats strfmt.Registry) error {
	if err := m.Retry.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("retry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("retry")
		}
		return err
	}

	return nil
}

func (m *PushoverConfig) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {
	if err := m.Token.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("token")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("token")
		}
		return err
	}

	return nil
}

func (m *PushoverConfig) contextValidateUserKey(ctx context.Context, formats strfmt.Registry) error {
	if err := m.UserKey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_key")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_key")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PushoverConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PushoverConfig) UnmarshalBinary(b []byte) error {
	var res PushoverConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
