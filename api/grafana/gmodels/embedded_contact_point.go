// Code generated by go-swagger; DO NOT EDIT.

package gmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EmbeddedContactPoint EmbeddedContactPoint is the contact point type that is used
// by grafanas embedded alertmanager implementation.
//
// swagger:model EmbeddedContactPoint
type EmbeddedContactPoint struct {
	// disable resolve message
	DisableResolveMessage bool `json:"disableResolveMessage,omitempty"`

	// Name is used as grouping key in the UI. Contact points with the
	// same name will be grouped in the UI.
	Name string `json:"name,omitempty"`

	// provenance
	Provenance string `json:"provenance,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// UID is the unique identifier of the contact point. This will be
	// automatically set be the Grafana.
	UID string `json:"uid,omitempty"`

	// settings
	Settings JSON `json:"settings,omitempty"`
}

// Validate validates this embedded contact point
func (m *EmbeddedContactPoint) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this embedded contact point based on context it is used
func (m *EmbeddedContactPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmbeddedContactPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmbeddedContactPoint) UnmarshalBinary(b []byte) error {
	var res EmbeddedContactPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
