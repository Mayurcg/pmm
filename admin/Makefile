default: help

help:                           ## Display this help message
	@echo "Please use \`make <target>\` where <target> is one of:"
	@grep '^[a-zA-Z]' $(MAKEFILE_LIST) | \
		awk -F ':.*?## ' 'NF==2 {printf "  %-26s%s\n", $$1, $$2}'

# `cut` is used to remove first `v` from `git describe` output
PMM_RELEASE_PATH ?= ../bin
PMM_RELEASE_VERSION ?= $(shell git describe --always --dirty | cut -b2-)
PMM_RELEASE_TIMESTAMP ?= $(shell date '+%s')
PMM_RELEASE_FULLCOMMIT ?= $(shell git rev-parse HEAD)
PMM_RELEASE_BRANCH ?= $(shell git describe --always --contains --all)
PMM_SERVER_UPGRADE_DOCKER_TAG ?= percona/pmm-server-upgrade:$(PMM_RELEASE_VERSION)
ifeq ($(GOBIN),)
	GOBIN := $(shell go env GOPATH)/bin
endif

LD_FLAGS = -ldflags " \
			-X 'github.com/percona/pmm/version.ProjectName=pmm-admin' \
			-X 'github.com/percona/pmm/version.Version=$(PMM_RELEASE_VERSION)' \
			-X 'github.com/percona/pmm/version.PMMVersion=$(PMM_RELEASE_VERSION)' \
			-X 'github.com/percona/pmm/version.Timestamp=$(PMM_RELEASE_TIMESTAMP)' \
			-X 'github.com/percona/pmm/version.FullCommit=$(PMM_RELEASE_FULLCOMMIT)' \
			-X 'github.com/percona/pmm/version.Branch=$(PMM_RELEASE_BRANCH)' \
			"

gen: clean                      ## Generate files
	go generate ./...

clean:                          ## Remove generated files
	find . -name *_reform.go -delete
	find . -name mock_*.go -delete

release:                        ## Build release pmm, pmm-admin, pmm-server-upgrade binaries
	env CGO_ENABLED=0 go build -v $(LD_FLAGS) -o $(PMM_RELEASE_PATH)/pmm-admin ./cmd/pmm-admin/
	env CGO_ENABLED=0 go build -v $(LD_FLAGS) -o $(PMM_RELEASE_PATH)/pmm ./cmd/pmm/
	env CGO_ENABLED=0 go build -v $(LD_FLAGS) -o $(PMM_RELEASE_PATH)/pmm-server-upgrade ./cmd/pmm-server-upgrade/

install:                        ## Install pmm, pmm-admin, pmm-server-upgrade binaries
	go build -v $(LD_FLAGS) -o $(GOBIN)/pmm-admin ./cmd/pmm-admin/
	go build -v $(LD_FLAGS) -o $(GOBIN)/pmm ./cmd/pmm/
	go build -v $(LD_FLAGS) -o $(GOBIN)/pmm-server-upgrade ./cmd/pmm-server-upgrade/

install-race:                   ## Install pmm, pmm-admin, pmm-server-upgrade binaries with race detector
	go build -v $(LD_FLAGS) -race -o $(GOBIN)/pmm-admin ./cmd/pmm-admin/
	go build -v $(LD_FLAGS) -race -o $(GOBIN)/pmm ./cmd/pmm/
	go build -v $(LD_FLAGS) -race -o $(GOBIN)/pmm-server-upgrade ./cmd/pmm-server-upgrade/

build-docker: release			## Build docker image for pmm-server-upgrade
	docker build \
		-t $(PMM_SERVER_UPGRADE_DOCKER_TAG) \
		-f ../build/docker/pmm-server-upgrade/Dockerfile \
		--build-arg VERSION=$(PMM_RELEASE_VERSION) \
		--build-arg BUILD_DATE=$(PMM_RELEASE_TIMESTAMP) \
		$(PMM_RELEASE_PATH)/

TEST_FLAGS ?= -timeout=20s

test:                           ## Run tests
	go test $(TEST_FLAGS) -race ./...

test-cover:                     ## Run tests and collect cross-package coverage information
	go test $(TEST_FLAGS) -race -coverprofile=cover.out -covermode=atomic -coverpkg=./... ./...

env-up:                         ## Start development environment
	docker-compose up --force-recreate --abort-on-container-exit --renew-anon-volumes --remove-orphans

env-down:                       ## Stop development environment
	docker-compose down --volumes --remove-orphans

